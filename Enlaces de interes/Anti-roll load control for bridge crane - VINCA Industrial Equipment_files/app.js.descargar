(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __reExport = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toModule = (module) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
  };

  // resources/js/ismobile.js
  var require_ismobile = __commonJS({
    "resources/js/ismobile.js"(exports, module) {
      (function() {
        var f = {};
        var g = /iPhone/i, i = /iPod/i, j = /iPad/i, k = /\biOS-universal(?:.+)Mac\b/i, h = /\bAndroid(?:.+)Mobile\b/i, m = /Android/i, c = /(?:SD4930UR|\bSilk(?:.+)Mobile\b)/i, d = /Silk/i, b = /Windows Phone/i, n = /\bWindows(?:.+)ARM\b/i, p = /BlackBerry/i, q = /BB10/i, s = /Opera Mini/i, t = /\b(CriOS|Chrome)(?:.+)Mobile/i, u = /Mobile(?:.+)Firefox\b/i, v = function(l) {
          return l !== void 0 && l.platform === "MacIntel" && typeof l.maxTouchPoints == "number" && l.maxTouchPoints > 1 && typeof MSStream == "undefined";
        };
        function w(l) {
          return function($) {
            return $.test(l);
          };
        }
        function x(l) {
          var $ = { userAgent: "", platform: "", maxTouchPoints: 0 };
          l || typeof navigator == "undefined" ? typeof l == "string" ? $.userAgent = l : l && l.userAgent && ($ = { userAgent: l.userAgent, platform: l.platform, maxTouchPoints: l.maxTouchPoints || 0 }) : $ = { userAgent: navigator.userAgent, platform: navigator.platform, maxTouchPoints: navigator.maxTouchPoints || 0 };
          var a = $.userAgent, e = a.split("[FBAN");
          e[1] !== void 0 && (a = e[0]), (e = a.split("Twitter"))[1] !== void 0 && (a = e[0]);
          var r = w(a), o = { apple: { phone: r(g) && !r(b), ipod: r(i), tablet: !r(g) && (r(j) || v($)) && !r(b), universal: r(k), device: (r(g) || r(i) || r(j) || r(k) || v($)) && !r(b) }, amazon: { phone: r(c), tablet: !r(c) && r(d), device: r(c) || r(d) }, android: { phone: !r(b) && r(c) || !r(b) && r(h), tablet: !r(b) && !r(c) && !r(h) && (r(d) || r(m)), device: !r(b) && (r(c) || r(d) || r(h) || r(m)) || r(/\bokhttp\b/i) }, windows: { phone: r(b), tablet: r(n), device: r(b) || r(n) }, other: { blackberry: r(p), blackberry10: r(q), opera: r(s), firefox: r(u), chrome: r(t), device: r(p) || r(q) || r(s) || r(u) || r(t) }, any: false, phone: false, tablet: false };
          return o.any = o.apple.device || o.android.device || o.windows.device || o.other.device, o.phone = o.apple.phone || o.android.phone || o.windows.phone, o.tablet = o.apple.tablet || o.android.tablet || o.windows.tablet, o;
        }
        f = x();
        if (typeof exports === "object" && typeof module !== "undefined") {
          module.exports = f;
        } else if (typeof define === "function" && define.amd) {
          define(function() {
            return f;
          });
        } else {
          this["isMobile"] = f;
        }
      })();
    }
  });

  // resources/js/app.js
  var import_ismobile = __toModule(require_ismobile());

  // resources/js/contact.js
  function attachHint(element, hintText) {
    function clearHint(e) {
      if (e.target.value === hintText) {
        e.target.value = "";
        e.target.classList.remove("hint");
      }
    }
    function setHint(e) {
      if (e.target) {
        if (e.target.value.length === 0 || e.target.value === hintText) {
          e.target.value = hintText;
          e.target.classList.add("hint");
        }
      } else {
        if (e.value.length === 0 || e.value === hintText) {
          e.value = hintText;
          e.classList.add("hint");
        }
      }
    }
    function setHintEl(el) {
      if (el.value.length === 0 || el.value === hintText) {
        el.value = hintText;
        el.classList.add("hint");
      }
    }
    elementAdd = document.getElementById(element);
    if (elementAdd) {
      elementAdd.addEventListener("focus", clearHint);
      elementAdd.addEventListener("blur", setHint);
      elementAdd.addEventListener("change", setHint);
      setHint(elementAdd);
    }
  }
  function displayHints() {
    if (attachHint) {
      attachHint("ffirstname", "Nombre");
      attachHint("femail", "Email");
      attachHint("fphonenumber", "Tel\xE9fono");
      attachHint("fwebsite", "Web Site");
      attachHint("fmessage", "Mensaje...");
      attachHint("fcompany", "Empresa/Organizaci\xF3n");
      attachHint("ffirstname_demo", "Nombre");
      attachHint("femail_demo", "Email");
      attachHint("fphonenumber_demo", "Tel\xE9fono");
      attachHint("fwebsite_demo", "Web Site");
      attachHint("fmessage_demo", "Mensaje...");
      attachHint("fcompany_demo", "Empresa/Organizaci\xF3n");
    }
  }
  function successContact(params) {
    var buttons = document.querySelectorAll(".button.send-action");
    buttons.forEach(function(button) {
      button.style.opacity = "0.2";
      button.style.pointerEvents = "none";
    });
    var buttons = document.querySelectorAll(".button.send-action_demo");
    buttons.forEach(function(button) {
      button.style.opacity = "0.2";
      button.style.pointerEvents = "none";
    });
    formAction = params.get("input_12");
    window.dataLayer = window.dataLayer || [];
    window.dataLayer.push({ "event": formAction });
  }
  function ResetInput() {
    document.querySelectorAll('input[type="text"], textarea').forEach(function(element) {
      element.value = "";
    });
    document.querySelectorAll('input[type="radio"]').forEach(function(element) {
      element.checked = false;
    });
    document.querySelectorAll('input[type="checkbox"]').forEach(function(element) {
      element.checked = false;
    });
  }
  function ResetStatus() {
    let sendingMessageStatus = document.querySelectorAll("#sending-message-status");
    sendingMessageStatus.forEach(function() {
      sendingMessageStatus.textContent = "";
    });
    let sendingMessageStatusDemo = document.querySelectorAll("#sending-message-status_demo");
    sendingMessageStatusDemo.forEach(function() {
      sendingMessageStatusDemo.textContent = "";
    });
  }
  function SendMail() {
    const formElement = document.getElementById("contact-form");
    let isValid = true;
    let emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,})?$/;
    let femail = document.getElementById("femail").value;
    let foptin = document.getElementById("foptin").checked;
    let ffirstname = document.getElementById("ffirstname").value;
    let fmessage = document.getElementById("fmessage").value;
    let fwebsite = document.getElementById("fwebsite").value;
    let fcompany = document.getElementById("fcompany").value;
    const sendingMessageStatus = document.getElementById("sending-message-status");
    if (!emailReg.test(femail) || femail == "") {
      isValid = false;
      ResetStatus();
      sendingMessageStatus.textContent = "Comprueba la direcci\xF3n de Email.";
    }
    if (!foptin) {
      isValid = false;
      ResetStatus();
      sendingMessageStatus.textContent = "Debes aceptar la pol\xEDtica de privacidad.";
    }
    if (ffirstname == "") {
      isValid = false;
      ResetStatus();
      sendingMessageStatus.textContent = "Comprueba tu nombre.";
    }
    if (fmessage == "") {
      isValid = false;
      ResetStatus();
      sendingMessageStatus.textContent = "Escribe un mensaje.";
    }
    if (fwebsite == "Empresa") {
      fwebsite = "";
    }
    if (fwebsite == "Web Site") {
      fcompany = "";
    }
    if (isValid) {
      var params = new FormData(formElement);
      sendingMessageStatus.textContent = "Enviando datos...";
      fetch("/wp-content/themes/multiploai/_services/mainHandler.php", {
        method: "POST",
        body: params
      }).then((response) => response.json()).then((responseObj) => {
        if (responseObj.ResponseData) {
          sendingMessageStatus.textContent = "Enviado!!!";
          successContact(params);
          sendToGravityForms(formElement);
        } else {
          sendingMessageStatus.textContent = "Ha habido un error. Vuelve a intentarlo";
        }
        ResetInput();
        displayHints();
      }).catch((error) => {
        sendingMessageStatus.textContent = "Ha habido un error. Vuelve a intentarlo";
      });
    }
  }
  function SendMailDemo() {
    const formElement = document.getElementById("contact-form_demo");
    let isValid = true;
    let emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,})?$/;
    let femail = document.getElementById("femail_demo").value;
    let foptin = document.getElementById("foptin_demo").checked;
    let ffirstname = document.getElementById("ffirstname_demo").value;
    let fmessage = document.getElementById("fmessage_demo").value;
    let fwebsite = document.getElementById("fwebsite_demo").value;
    let fcompany = document.getElementById("fcompany_demo").value;
    const sendingMessageStatus = document.getElementById("sending-message-status_demo");
    if (!emailReg.test(femail) || femail == "") {
      isValid = false;
      ResetStatus();
      sendingMessageStatus.textContent = "Comprueba la direcci\xF3n de Email.";
    }
    if (!foptin) {
      isValid = false;
      ResetStatus();
      sendingMessageStatus.textContent = "Debes aceptar la pol\xEDtica de privacidad.";
    }
    if (ffirstname == "") {
      isValid = false;
      ResetStatus();
      sendingMessageStatus.textContent = "Comprueba tu nombre.";
    }
    if (fmessage == "") {
      isValid = false;
      ResetStatus();
      sendingMessageStatus.textContent = "Escribe un mensaje.";
    }
    if (fwebsite == "Empresa") {
      fwebsite = "";
    }
    if (fwebsite == "Web Site") {
      fcompany = "";
    }
    if (isValid) {
      var params = new FormData(formElement);
      sendingMessageStatus.textContent = "Enviando datos...";
      fetch("/wp-content/themes/multiploai/_services/mainHandler.php", {
        method: "POST",
        body: params
      }).then((response) => response.json()).then((responseObj) => {
        if (responseObj.ResponseData) {
          sendingMessageStatus.textContent = "Enviado!!!";
          successContact(params);
          sendToGravityForms(formElement);
        } else {
          sendingMessageStatus.textContent = "Ha habido un error. Vuelve a intentarlo";
        }
        ResetInput();
        displayHints();
      }).catch((error) => {
        sendingMessageStatus.textContent = "Ha habido un error. Vuelve a intentarlo";
      });
    }
  }
  function sendToGravityForms(formElement) {
    const action = "/wp-json/gf/v2/forms/3/submissions";
    const { method } = formElement, body = new FormData(formElement);
    fetch(action, {
      method,
      body
    }).then((response) => response.json()).then((response) => {
      if (isFormSubmissionError(response)) {
      }
    }).catch((error) => {
    });
  }
  window.SendMail = SendMail;
  window.SendMailDemo = SendMailDemo;
  window.addEventListener("DOMContentLoaded", (...props) => {
    displayHints(...props);
  });

  // resources/js/observables.js
  window.addEventListener("load", function(event) {
    const elements = document.querySelectorAll(".observable");
    const observer = new IntersectionObserver(onChange, {
      root: document.documentElement.body,
      rootMargin: "-150px",
      threshold: buildThresholdList(parseFloat(elements.length, 2))
    });
    elements.forEach((element) => observer.observe(element));
  }, false);
  function buildThresholdList(steps) {
    let thresholds = [];
    thresholds.push(0);
    for (let i = 1; i <= steps; i++) {
      const ratio = i / steps;
      thresholds.push(ratio);
    }
    return thresholds;
  }
  function onChange(changes) {
    changes.forEach((change) => {
      const $target = change.target;
      bodyclass = $target.dataset.obbodyclass;
      elementclass = $target.dataset.obelclass;
      if (change.isIntersecting) {
        $target.classList.add("is-visible");
        if (bodyclass != void 0)
          document.body.classList.add(bodyclass);
        if (elementclass != void 0)
          $target.classList.add(elementclass);
      } else {
        $target.classList.remove("is-visible");
        if (bodyclass != void 0)
          document.body.classList.remove(bodyclass);
        if (elementclass != void 0)
          $target.classList.remove(elementclass);
      }
    });
  }

  // resources/js/events.js
  var lastScroll = 0;
  function offwidthElement() {
    document.querySelectorAll(".transmargin").forEach(function(element) {
      let transreference = element.parentElement.querySelector(".transreference");
      if (document.body.clientWidth > 1200) {
        var rect = transreference.getBoundingClientRect();
        var margin = rect.left;
        element.style.transform = "translateX(" + margin + "px)";
        var controls = element.querySelectorAll(".glide__controls");
        controls.forEach(function(item) {
          item.style.width = "calc(100% - " + margin + "px)";
        });
        var controls = element.querySelectorAll(".glide__controls.primary-to-r");
        controls.forEach(function(item) {
          item.style.width = "80%";
        });
      } else {
        element.style.transform = "translateX(0px)";
        var controls = element.querySelectorAll(".glide__controls");
        controls.forEach(function(item) {
          item.style.width = "100%";
        });
      }
    });
  }
  function imageEffects() {
    var maxScroll = 200;
    var maxScrollBackground = 1e3;
    var maxScale = 1.1;
    var steps = (1 - maxScale) / maxScroll;
    var xa = window.pageYOffset || document.documentElement.scrollTop;
    var x = maxScale + xa * steps;
    var xBackground = 2 / maxScrollBackground + xa * steps;
    if (x <= 1)
      x = 1;
    var imagePostEffects = document.querySelectorAll(".image-post-wrapper .image-post-effect");
    imagePostEffects.forEach(function(elem) {
      elem.style.transform = "scale(" + x + ", " + x + ")";
    });
    var backgroundImages = document.querySelectorAll(".background-image");
    backgroundImages.forEach(function(elem) {
      elem.style.transform = "scale(" + xBackground + ", " + xBackground + ") rotate(" + xa / 100 + "deg)";
    });
  }
  function scrollDown() {
    const currentScroll = window.pageYOffset;
    const body = document.body;
    const menu = document.querySelector("nav[role=navigation]");
    const dropdowns = document.querySelectorAll(".dropdown");
    const toggle_button = document.querySelector(".toggle");
    const scrollUp = "scroll-up";
    const scrollDown2 = "scroll-down";
    const headerHeight = document.getElementById("main-menu").offsetHeight;
    if (currentScroll <= 0) {
      body.classList.remove(scrollUp);
      return;
    }
    if (currentScroll > lastScroll && currentScroll > headerHeight && !body.classList.contains(scrollDown2)) {
      body.classList.remove(scrollUp);
      body.classList.add(scrollDown2);
      menu.classList.remove("open");
      toggle_button.classList.remove("open");
      dropdowns.forEach(function(element) {
        element.classList.remove("hover");
      });
    } else if (currentScroll < lastScroll && body.classList.contains(scrollDown2)) {
      body.classList.remove(scrollDown2);
      body.classList.add(scrollUp);
      menu.classList.remove("open");
      toggle_button.classList.remove("open");
      dropdowns.forEach(function(element) {
        element.classList.remove("hover");
      });
    }
    lastScroll = currentScroll;
  }
  function searchBox(ev) {
    const searchField = document.querySelector(".search-field");
    if (ev === "open") {
      document.body.classList.add("search-open");
    }
    if (ev === "close") {
      document.body.classList.remove("search-open");
      searchField.classList.remove("move-up");
      searchField.value = "";
    }
    const moveText = function() {
      searchField.classList.add("move-up");
    };
    searchField.addEventListener("focus", moveText);
    searchField.addEventListener("click", moveText);
    document.querySelector(".search-submit").disabled = true;
    searchField.addEventListener("keyup", function() {
      document.querySelector(".search-submit").disabled = this.value === "";
    });
  }
  function init() {
    if (window.innerWidth >= 1260) {
      document.querySelectorAll("#primary-menu .menu-item").forEach(function(element) {
        element.addEventListener("mouseover", function(event) {
          event.preventDefault();
          element.classList.add("hover");
        });
        element.addEventListener("mouseout", function(event) {
          event.preventDefault();
          element.classList.remove("hover");
        });
      });
    }
    if (window.innerWidth < 1260) {
      document.querySelectorAll("#primary-menu .menu-item .icon").forEach(function(element) {
        element.addEventListener("click", function(event) {
          event.preventDefault();
          element.closest(".menu-item").classList.toggle("hover");
        });
      });
    }
    document.querySelectorAll(".scroll-top").forEach(function(element) {
      element.addEventListener("click", function(event) {
        event.preventDefault();
        window.scrollTo({ top: 0, behavior: "smooth" });
      });
    });
    document.querySelectorAll(".togglelist > li").forEach(function(element) {
      element.classList.add("toggle-element");
    });
    document.querySelectorAll(".togglelist .toggle-element").forEach(function(element) {
      element.classList.add("toggle-close");
      element.querySelectorAll(".item-content").forEach(function(child) {
        child.style.display = "none";
      });
    });
    const firstToggleElement = document.querySelector(".togglelist .toggle-element");
    if (firstToggleElement) {
      firstToggleElement.classList.add("toggle-open");
      firstToggleElement.classList.remove("toggle-close");
      firstToggleElement.querySelectorAll(".item-content").forEach(function(child) {
        child.style.display = "block";
      });
    }
    document.querySelectorAll(".togglelist .toggle-element .item-title").forEach(function(element) {
      element.addEventListener("click", function() {
        var parentElement = this.parentElement;
        parentElement.classList.toggle("toggle-close");
        parentElement.classList.toggle("toggle-open");
        var siblingContent = this.nextElementSibling;
        if (siblingContent.style.display === "none") {
          siblingContent.style.display = "block";
        } else {
          siblingContent.style.display = "none";
        }
      });
    });
    const glides = document.querySelectorAll(".glide");
    glides.forEach(function(element) {
      let perView = element.dataset.perview == void 0 ? 1 : element.dataset.perview;
      let gap = element.dataset.gap == void 0 ? 0 : element.dataset.gap;
      let center = element.dataset.center == void 0 ? "center" : element.dataset.center;
      elementGlide = new Glide(element, {
        type: "slider",
        perView: 4,
        peek: {
          before: 0,
          after: 0
        },
        autoplay: false,
        autoheight: true,
        hoverpause: true,
        breakpoints: {
          599: {
            perView: 1,
            gap: 0
          },
          600: {
            perView: 2,
            gap
          },
          1200: {
            perView: 2,
            gap
          },
          1500: {
            perView: 3,
            gap
          },
          2560: {
            perView: 4,
            gap
          }
        }
      }).mount();
      element.parentElement.classList.remove("opacity-0");
      elementGlide.on(["update"], function() {
        var parent = element.parentElement;
        parent.classList.add("show");
      });
    });
    const glidesvideos = document.querySelectorAll(".glide-video");
    glidesvideos.forEach(function(element) {
      let perView = element.dataset.perview == void 0 ? 1 : element.dataset.perview;
      let gap = element.dataset.gap == void 0 ? 0 : element.dataset.gap;
      let center = element.dataset.center == void 0 ? "center" : element.dataset.center;
      elementGlide = new Glide(element, {
        type: "slider",
        perView: 4,
        peek: {
          before: 0,
          after: 0
        },
        autoplay: false,
        autoheight: true,
        hoverpause: true,
        breakpoints: {
          599: {
            perView: 1,
            gap: 0
          },
          600: {
            perView: 1,
            gap
          },
          1200: {
            perView: 2,
            gap
          },
          1500: {
            perView: 3,
            gap
          },
          2560: {
            perView: 3,
            gap
          }
        }
      }).mount();
      element.parentElement.classList.remove("opacity-0");
      elementGlide.on(["update"], function() {
        var parent = element.parentElement;
        parent.classList.add("show");
      });
    });
    document.querySelectorAll("li.search").forEach(function(item) {
      item.addEventListener("click", function(e) {
        searchBox("open");
        e.preventDefault();
      });
    });
    document.querySelectorAll(".close").forEach(function(item) {
      item.addEventListener("click", function(e) {
        searchBox("close");
        e.preventDefault();
      });
    });
    const images = document.querySelectorAll(".zoomable-image");
    const modal = document.getElementById("image-modal");
    const modalImage = document.getElementById("modal-image");
    const closeModal = document.querySelectorAll(".close-modal");
    images.forEach(function(image) {
      image.addEventListener("click", function() {
        modal.style.display = "block";
        modalImage.src = this.dataset.image;
      });
    });
    closeModal.forEach(function(close) {
      close.addEventListener("click", function() {
        modal.style.display = "none";
      });
    });
    window.addEventListener("click", function(event) {
      if (event.target == modal) {
        modal.style.display = "none";
      }
    });
  }
  window.addEventListener("resize", (...props) => {
    offwidthElement(...props);
    scrollDown(...props);
  });
  window.addEventListener("load", (...props) => {
    init(...props);
    offwidthElement(...props);
    scrollDown(...props);
  });
  window.addEventListener("scroll", (...props) => {
    scrollDown(...props);
    imageEffects(...props);
  });
})();
